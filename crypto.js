var passphrase, plaintext, alice_cipher_text, ciphertext, algorithm, key, iterations, selMode, selTag, selKeySize;
var encryptionAlg = "aes";
//variables generated by SJLC for additional security, such as initialization vector 
var v, iv;
var rp = {};

$(document).ready(function(){

   $("#encryption").click(function(){
       document.getElementById("log").innerHTML += "<br><i>ENCRYPTING using AES algorithm...</i> ";
       //session key
        passphrase = $("#passphrase").val();
        plaintext = $("#plaintext").val();
       iterations = $("#iterations").val();
       //console.log(passphrase + " and pt: " + plaintext + " " + iterations);
       
       var p_pbkd = sjcl.misc.cachedPbkdf2(passphrase, p_pbkd);
       
       selMode = $('input[name=authmode]:checked').val();
       
       selTag = $('input[name=tag]:checked').val();
       
       selKeySize = $('input[name=keysize]:checked').val();
       
       document.getElementById("log").innerHTML += "<br>Selected AES mode is: " + selMode + "<br>With tag size " + selTag + " and key size " + selKeySize + ". Number of iterations desired: " + iterations;
       
       key = p_pbkd.key.slice(0, selKeySize/32);
       
       document.getElementById("log").innerHTML += "<br><br>Symmetric key is derived from the shared session token using password based key derivcation PBKD-HMAC-256. The key is cut to Alice's specified size to result in: " + String(key);
       
       //tag is auth strength
       var p = { adata: "",
        iter: iterations,
        mode:selMode,
        ts:parseInt(selTag),
        ks:parseInt(selKeySize) };

       
       //ct is generated ciphertext
       var ct = sjcl.encrypt(key, plaintext, p, rp);
       
       
       //store some data generated into the ct json object through the SJCL library, such as initialization vector
       alice_cipher_text = $.parseJSON(ct);
       $("#ciphertext").text(alice_cipher_text.ct);
       $("#messageFromAlice").text(alice_cipher_text.ct);
       
        document.getElementById("log").innerHTML += "<br><br>The ciphertext generated by Alice is: " + alice_cipher_text.ct + "<br>The following public initialization vector was pseudorandomly generated to add randomness to the encrypted message: " + alice_cipher_text.iv;
       
       v = alice_cipher_text.v;
       iv = alice_cipher_text.iv;
        
        document.getElementById("log").innerHTML += "<br><br><i>ENCRYPTION COMPLETE</i>";
    });
    
    
       $("#decryption").click(function(){
            document.getElementById("log").innerHTML += "<br><br><i>DECRYPTING...</i> ";
           //clear any prior decrypted plaintext
           $("#decryptedPlaintext").text("");
           
           //bob's session key
           var bobPassphrase = $("#bobPassphrase").val();
           ciphertext = $("#bobCiphertext").val();
           var p_pbkd = sjcl.misc.cachedPbkdf2(bobPassphrase, p_pbkd);
           var bobKey = p_pbkd.key.slice(0, selKeySize/32);
            document.getElementById("log").innerHTML += "<br><br>Symmetric key is derived from Bob's session token: " + String(bobKey);
           //check bob's and alice's key derived from session token are the same (will not be same with different session tokens)
           if(String(bobKey) == String(key)) {
                    document.getElementById("log").innerHTML += "<br>Alice and Bob's keys match! This indicates correct session token usage";
                       
                   //check that bob's ciphertext inputted matches alice's generated ciphertext
                   if(String(alice_cipher_text.ct) != ciphertext) {
                       document.getElementById("log").innerHTML += "<br>Cannot decrypt! Ciphertext has been tampered with.";
                       alert("The ciphertext has been tampered with or Alice is not the sender!");
                   }
                   else {
                       //build ciphertext "json" object
                        var builder = {"iv":iv, "v":v, "iter":iterations, "ks":parseInt(selKeySize), "ts":parseInt(selTag), "mode":selMode, "adata":"", "cipher":encryptionAlg, "ct":ciphertext };

                       var ct_json = JSON.stringify(builder);
                       //console.log("Bob's ciphertext JSON: " + ct_json);

                       var decrypted = sjcl.decrypt(key, ct_json, {}, rp);
                       document.getElementById("log").innerHTML += "<br><br>Bob's decrypted plaintext: " + decrypted;

                       if(String(decrypted) == plaintext) {
                           $("#decryptedPlaintext").text(decrypted);
                           document.getElementById("log").innerHTML += "<br>This matches Alice's original message!";
                           alert("Alice's message successfully decrypted");
                       }

                       else {
                           document.getElementById("log").innerHTML += "<br>Cannot decrypt! Ciphertext has been tampered with.";
                           alert("The ciphertext has been tampered with or Alice is not the sender!");
                       }
                   }
                }
               else {
                   document.getElementById("log").innerHTML += "<br>Cannot decrypt...incorrect session key used by Bob";
                   alert("Incorrect Passphrase!");
               }
           
               document.getElementById("log").innerHTML += "<br><br>DECRYPTION COMPLETE";

       });
    
    
    
});