var passphrase, plaintext, alice_cipher_text, ciphertext, algorithm, key, iterations, selMode, selTag, selKeySize;
var encryptionAlg = "aes";
//variables generated by SJLC for additional security, such as initialization vector 
var v, iv;
var rp = {};

$(document).ready(function(){
    //display panels based on selected security level
    $(".dropdown-menu li a").click(function(){
        var securitySel = $(this).attr('data-value');
        if(securitySel == "all") {
            //show all
            $(".panel").show();
        }
        else {
            $(".panel").hide();
            $("."+securitySel).show(); 
        }
        
    });
    
    
   $("#encryption").click(function(){
       console.log("ENCRYPTING");
       //session key
        passphrase = $("#passphrase").val();
        plaintext = $("#plaintext").val();
       iterations = $("#iterations").val();
       console.log(passphrase + " and pt: " + plaintext + " " + iterations);
       
       var p_pbkd = sjcl.misc.cachedPbkdf2(passphrase, p_pbkd);
       
       selMode = $('input[name=authmode]:checked').val();
       console.log(selMode);
       
       selTag = $('input[name=tag]:checked').val();
       console.log(selTag);
       
       selKeySize = $('input[name=keysize]:checked').val();
       console.log(selKeySize);
       
       key = p_pbkd.key.slice(0, selKeySize/32);
       
       //tag is auth strength
       var p = { adata: "",
        iter: iterations,
        mode:selMode,
        ts:parseInt(selTag),
        ks:parseInt(selKeySize) };

       
       //ct is generated ciphertext
       var ct = sjcl.encrypt(key, plaintext, p, rp);
       
       //store some data generated into the ct json object through the SJCL library, such as initialization vector
       console.log("encryption: \n" + ct);
       alice_cipher_text = $.parseJSON(ct);
       $("#ciphertext").text(alice_cipher_text.ct);
       $("#messageFromAlice").text(alice_cipher_text.ct);
       
       v = alice_cipher_text.v;
       iv = alice_cipher_text.iv;
        
    });
    
    
       $("#decryption").click(function(){
            console.log("DECRYPTING");
           //clear any prior decrypted plaintext
           $("#decryptedPlaintext").text("");
           
           //bob's session key
           var bobPassphrase = $("#bobPassphrase").val();
           ciphertext = $("#bobCiphertext").val();
           var p_pbkd = sjcl.misc.cachedPbkdf2(bobPassphrase, p_pbkd);
           var bobKey = p_pbkd.key.slice(0, selKeySize/32);
           console.log("alice key: " + key + " and bob's key: " + bobKey);
           //check bob's and alice's key derived from session token are the same (will not be same with different session tokens)
           if(String(bobKey) == String(key)) {
                   //check that bob's ciphertext inputted matches alice's generated ciphertext
                   if(String(alice_cipher_text.ct) != ciphertext) {
                       alert("The ciphertext has been tampered with or Alice is not the sender!");
                   }
                   else {
                       //build ciphertext "json" object
                        var builder = {"iv":iv, "v":v, "iter":iterations, "ks":parseInt(selKeySize), "ts":parseInt(selTag), "mode":selMode, "adata":"", "cipher":encryptionAlg, "ct":ciphertext };

                       var ct_json = JSON.stringify(builder);
                       console.log("Bob's ciphertext JSON: " + ct_json);

                       var decrypted = sjcl.decrypt(key, ct_json, {}, rp);
                       console.log("Bob's decrypted plaintext" + decrypted);

                       if(String(decrypted) == plaintext) {
                           $("#decryptedPlaintext").text(decrypted);
                           alert("Alice's message successfully decrypted");
                       }

                       else {
                           alert("The ciphertext has been tampered with or Alice is not the sender!");
                       }
                   }
                }
               else {
                   alert("Incorrect Passphrase!");
               }
           
               

       });
    
    
    
});